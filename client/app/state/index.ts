import {createSlice} from "@reduxjs/toolkit";

// Define the initial state of the application
const initialState = {
    mode: "light", // Represents the current theme mode ("light" or "dark")
    user: null, // Represents the currently logged-in user
    token: null, // Represents the authentication token
    posts: [], // Represents a list of posts
};

// Create a slice of the Redux store using the createSlice function from Redux Toolkit
export const authSlice = createSlice({
    name: "auth", // Name of the slice
    initialState, // Initial state of the slice
    reducers: {
        setMode: (state) => {
            /* In Redux, it's recommended not to modify the state directly. Instead, you should create a new state object based on the previous state.
             * Redux Toolkit uses a library called immer that makes it easier to create the new state object without directly modifying the original state.
             * So, even though it looks like we're modifying the state directly, under the hood, Redux Toolkit creates a new state object and replaces the old one with it.
             */

            // Toggle the theme mode between "light" and "dark"
            state.mode = state.mode === "light" ? "dark" : "light";
            // Here, `state.mode` represents the previous theme mode(mode: "light"), and `state.mode === "light" ? "dark" : "light"` represents the new theme mode.
        },
        setLogin: (state, action) => {
            // Set the logged-in user and authentication token
            state.user = action.payload.user;
            state.token = action.payload.token;
            // Here, `action.payload` represents the data passed when dispatching this action.
            // `action.payload.user` represents the user data,
            // and `action.payload.token` represents the authentication token.
        },
        setLogout: (state) => {
            state.user = null;
            state.token = null;
        },
        setFriends: (state, action) => {
            // Clear the logged-in user and authentication token
            if (state.user) {
                // Set the friends of the logged-in user
                state.user.friends = action.payload.friends;
                // Here, `action.payload.friends` represents the list of friends passed in the action payload.
            } else {
                console.error("user friends non-existent :(");
                // If there is no logged-in user, an error message is logged to the console.
            }
        },
        // Set the list of posts
        setPosts: (state, action) => {
            state.posts = action.payload.posts;
            // Here, `action.payload.posts` represents the list of posts passed in the action payload.
        },
        setPost: (state, action) => {
            // Update a specific post in the list of posts
            const updatedPosts = state.posts.map((post) => {
                // If the post's _id matches the updated post's _id,
                // replace it with the updated post in the new array
                if (post._id === action.payload.post._id) return action.payload.post;
                return post;
            });
            state.posts = updatedPosts;
            // Here, `action.payload.post` represents the updated post passed in the action payload.
        },
    },
});
// Extract the actions generated by the createSlice function
export const {setMode, setLogin, setLogout, setFriends, setPosts, setPost} =
    authSlice.actions;
export default authSlice.reducer;
